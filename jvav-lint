#!/usr/bin/env python3

import argparse
import os

lint_targets = ['{', '}', ';']


def main():
    parser = argparse.ArgumentParser(
        description='Javav-Lint, a linting tool for Java code.')

    parser.add_argument('files', metavar='file', type=str, nargs='+',
                        help='The files to lint')
    parser.add_argument('-i', '--inplace', action='store_true',
                        help='Modify the files in place')

    args = parser.parse_args()

    for file in args.files:
        if not os.path.isfile(file):
            print('{} is not a file'.format(file))
            continue

        if not file.endswith('.java'):
            print('{} is not a Java file'.format(file))
            continue

        with open(file, 'r') as f:
            lines = f.readlines()
        result = lint(lines)

        content = '\n'.join(result) + '\n'

        if args.inplace:
            with open(file, 'w') as f:
                f.write(content)
        else:
            print(content)


def lint(lines: list[str]) -> str:
    # replace tabs with spaces
    lines = [line.replace('\t', ' '*4) for line in lines]

    # Get max line length
    max_line_length = 0
    for i, line in enumerate(lines):
        if len(line) > max_line_length:
            max_line_length = len(line)

    # Move all target to the end of the line
    linted_lines = []
    for i, line in enumerate(lines):
        line = line.rstrip()
        for target in lint_targets:
            if line.endswith(target):
                line = line[:-1] + ' ' * \
                    (max_line_length - len(line) - 1) + target
        linted_lines.append(line)

    # Square blankline's target to the previous non-blankline
    not_blank_line = 0
    for i, line in enumerate(linted_lines):
        if isBlank(line):
            linted_lines[not_blank_line] += line.strip()
        else:
            not_blank_line = i

    # put all non-blanlines into result
    result = []
    for i, line in enumerate(linted_lines):
        if not isBlank(line):
            result.append(line)

    return result


def isBlank(line: str) -> bool:
    return line.strip() in lint_targets


if __name__ == '__main__':
    main()
